/*
 * generated by Xtext 2.24.0
 */
package org.xtext.example.mydsl.generator


import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import javax.swing.JOptionPane
import org.xtext.example.mydsl.myDsl.MathExp
import org.xtext.example.mydsl.myDsl.Plus
import org.xtext.example.mydsl.myDsl.Minus
import org.xtext.example.mydsl.myDsl.Mult
import org.xtext.example.mydsl.myDsl.Div
import org.xtext.example.mydsl.myDsl.Num
import org.xtext.example.mydsl.myDsl.Expression
/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val math = resource.allContents.filter(MathExp).next
		System.out.println("Math expression = "+math.display)
	}
	
	
	def static int computeInt(MathExp math) { 
		(new MyDslGenerator).compute(math)
	}
	
	def int compute(MathExp math) { 
		math.exp.computeExp
	}
	
	def int computeExp(Expression exp) {
		switch exp {
			Plus: exp.left.computeExp + exp.right.computeExp
			Minus: exp.left.computeExp - exp.right.computeExp
			Mult: exp.left.computeExp * exp.right.computeExp
			Div: exp.left.computeExp / exp.right.computeExp
			Num: exp.value
			default: throw new Error("Invalid input expression")
		}
	}
	
	def CharSequence display(MathExp math) { 
		math.exp.displayExp
	}
	
	def CharSequence displayExp(Expression exp) { 
		switch exp { 
			Plus: exp.left.displayExp+"+"+exp.right.displayExp
			Minus:exp.left.displayExp+"-"+exp.right.displayExp
			Mult: exp.left.displayExp+"*"+exp.right.displayExp
			Div: exp.left.displayExp+"/"+exp.right.displayExp
			Num: Integer.toString(exp.value)
			default: throw new Error("Invalid input expression")
		}
	}
}
