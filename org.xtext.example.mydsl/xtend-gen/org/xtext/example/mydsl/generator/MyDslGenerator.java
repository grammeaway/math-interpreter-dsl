/**
 * generated by Xtext 2.24.0
 */
package org.xtext.example.mydsl.generator;

import com.google.common.collect.Iterators;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.xtext.example.mydsl.myDsl.Div;
import org.xtext.example.mydsl.myDsl.Expression;
import org.xtext.example.mydsl.myDsl.MathExp;
import org.xtext.example.mydsl.myDsl.Minus;
import org.xtext.example.mydsl.myDsl.Mult;
import org.xtext.example.mydsl.myDsl.Num;
import org.xtext.example.mydsl.myDsl.Plus;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final MathExp math = Iterators.<MathExp>filter(resource.getAllContents(), MathExp.class).next();
    CharSequence _display = this.display(math);
    String _plus = ("Math expression = " + _display);
    System.out.println(_plus);
  }
  
  public static int computeInt(final MathExp math) {
    return new MyDslGenerator().compute(math);
  }
  
  public int compute(final MathExp math) {
    return this.computeExp(math.getExp());
  }
  
  public int computeExp(final Expression exp) {
    int _switchResult = (int) 0;
    boolean _matched = false;
    if (exp instanceof Plus) {
      _matched=true;
      int _computeExp = this.computeExp(((Plus)exp).getLeft());
      int _computeExp_1 = this.computeExp(((Plus)exp).getRight());
      _switchResult = (_computeExp + _computeExp_1);
    }
    if (!_matched) {
      if (exp instanceof Minus) {
        _matched=true;
        int _computeExp = this.computeExp(((Minus)exp).getLeft());
        int _computeExp_1 = this.computeExp(((Minus)exp).getRight());
        _switchResult = (_computeExp - _computeExp_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Mult) {
        _matched=true;
        int _computeExp = this.computeExp(((Mult)exp).getLeft());
        int _computeExp_1 = this.computeExp(((Mult)exp).getRight());
        _switchResult = (_computeExp * _computeExp_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Div) {
        _matched=true;
        int _computeExp = this.computeExp(((Div)exp).getLeft());
        int _computeExp_1 = this.computeExp(((Div)exp).getRight());
        _switchResult = (_computeExp / _computeExp_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Num) {
        _matched=true;
        _switchResult = ((Num)exp).getValue();
      }
    }
    if (!_matched) {
      throw new Error("Invalid input expression");
    }
    return _switchResult;
  }
  
  public CharSequence display(final MathExp math) {
    return this.displayExp(math.getExp());
  }
  
  public CharSequence displayExp(final Expression exp) {
    String _switchResult = null;
    boolean _matched = false;
    if (exp instanceof Plus) {
      _matched=true;
      CharSequence _displayExp = this.displayExp(((Plus)exp).getLeft());
      String _plus = (_displayExp + "+");
      CharSequence _displayExp_1 = this.displayExp(((Plus)exp).getRight());
      _switchResult = (_plus + _displayExp_1);
    }
    if (!_matched) {
      if (exp instanceof Minus) {
        _matched=true;
        CharSequence _displayExp = this.displayExp(((Minus)exp).getLeft());
        String _plus = (_displayExp + "-");
        CharSequence _displayExp_1 = this.displayExp(((Minus)exp).getRight());
        _switchResult = (_plus + _displayExp_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Mult) {
        _matched=true;
        CharSequence _displayExp = this.displayExp(((Mult)exp).getLeft());
        String _plus = (_displayExp + "*");
        CharSequence _displayExp_1 = this.displayExp(((Mult)exp).getRight());
        _switchResult = (_plus + _displayExp_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Div) {
        _matched=true;
        CharSequence _displayExp = this.displayExp(((Div)exp).getLeft());
        String _plus = (_displayExp + "/");
        CharSequence _displayExp_1 = this.displayExp(((Div)exp).getRight());
        _switchResult = (_plus + _displayExp_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Num) {
        _matched=true;
        _switchResult = Integer.toString(((Num)exp).getValue());
      }
    }
    if (!_matched) {
      throw new Error("Invalid input expression");
    }
    return _switchResult;
  }
}
